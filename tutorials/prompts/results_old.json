[
  {
    "output": "Here's a Python function that converts AWS EC2 instance state codes to their human-readable descriptions:\n\n```python\ndef convert_ec2_instance_state(state_code):\n    \"\"\"\n    Convert AWS EC2 instance state code to human-readable description.\n    \n    Args:\n        state_code (int): The EC2 instance state code\n    \n    Returns:\n        str: Human-readable description of the instance state\n    \"\"\"\n    # Dictionary mapping state codes to their descriptions\n    state_map = {\n        0: 'pending',\n        16: 'running',\n        32: 'shutting-down',\n        48: 'terminated',\n        64: 'stopping',\n        80: 'stopped'\n    }\n    \n    # Return the description, or 'Unknown' if state code is not in the map\n    return state_map.get(state_code, 'Unknown')\n\n# Example usage\ndef main():\n    # Test the function with various state codes\n    test_codes = [0, 16, 32, 48, 64, 80, 99]\n    \n    for code in test_codes:\n        state = convert_ec2_instance_state(code)\n        print(f\"State Code {code}: {state}\")\n\n# Run the example\nif __name__ == \"__main__\":\n    main()\n```\n\nThis implementation has several key features:\n\n1. Uses a dictionary (`state_map`) to map state codes to their descriptions\n2. Provides a clear, simple function to convert state codes\n3. Returns 'Unknown' for unrecognized state codes\n4. Includes a sample main function to demonstrate usage\n\nExample output:\n```\nState Code 0: pending\nState Code 16: running\nState Code 32: shutting-down\nState Code 48: terminated\nState Code 64: stopping\nState Code 80: stopped\nState Code 99: Unknown\n```\n\nAlternative implementation with error handling:\n\n```python\ndef convert_ec2_instance_state(state_code):\n    \"\"\"\n    Convert AWS EC2 instance state code to human-readable description.\n    \n    Args:\n        state_code (int): The EC2 instance state code\n    \n    Returns:\n        str: Human-readable description of the instance state\n    \n    Raises:\n        ValueError: If the state code is not recognized\n    \"\"\"\n    state_map = {\n        0: 'pending',\n        16: 'running',\n        32: 'shutting-down',\n        48: 'terminated',\n        64: 'stopping',\n        80: 'stopped'\n    }\n    \n    if state_code not in state_map:\n        raise ValueError(f\"Unrecognized EC2 instance state code: {state_code}\")\n    \n    return state_map[state_code]\n\n# Example usage with error handling\ndef main():\n    try:\n        print(convert_ec2_instance_state(16))  # Valid code\n        print(convert_ec2_instance_state(99))  # Invalid code\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n# Run the example\nif __name__ == \"__main__\":\n    main()\n```\n\nThis version raises a `ValueError` for unrecognized state codes, which can be useful in scenarios requiring strict error checking.\n\nKey considerations:\n- The state codes are based on AWS EC2 instance state definitions\n- The function handles both common and potential edge cases\n- Can be easily extended or modified as needed\n\nRecommended usage in AWS boto3 context:\n```python\nimport boto3\n\ndef get_instance_state(instance_id):\n    ec2 = boto3.client('ec2')\n    response = ec2.describe_instances(InstanceIds=[instance_id])\n    \n    # Extract state code\n    state_code = response['Reservations'][0]['Instances'][0]['State']['Code']\n    \n    # Convert to human-readable description\n    return convert_ec2_instance_state(state_code)\n```\n\nThis function provides a clean, robust way to convert EC2 instance state codes to readable descriptions in Python.",
    "test_case": {
      "task": "Create a Python function to convert an AWS EC2 instance state code (e.g., 0, 16, 32, 64, 80) to its human-readable description (pending, running, shutting-down, terminated, stopping)"
    },
    "score": 8,
    "reasoning": "The solution effectively solves the task of converting EC2 instance state codes to human-readable descriptions. It offers flexibility with two implementation approaches and demonstrates good coding practices. The code is clean, well-documented, and provides practical examples of usage. The alternative implementation with error handling shows thoughtful consideration of different use cases."
  },
  {
    "output": "Here's a JSON IAM policy that provides read-only access to S3 buckets in a specific AWS account:\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:GetBucketLocation\",\n                \"s3:GetObjectVersion\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::bucket-name/*\",\n                \"arn:aws:s3:::bucket-name\"\n            ]\n        }\n    ]\n}\n```\n\nKey details about this policy:\n\n- `Version`: Standard AWS policy version\n- `Effect`: \"Allow\" grants permissions\n- `Action`: \n  - `s3:GetObject`: Read individual objects\n  - `s3:ListBucket`: List bucket contents\n  - `s3:GetBucketLocation`: Get bucket region\n  - `s3:GetObjectVersion`: Access specific object versions\n- `Resource`: \n  - First ARN allows access to objects\n  - Second ARN allows bucket-level operations\n- Replace `bucket-name` with your specific S3 bucket name\n\nCustomize the policy as needed for your specific S3 access requirements.",
    "test_case": {
      "task": "Write a JSON object that defines an AWS IAM policy allowing read-only access to S3 buckets in a specific AWS account"
    },
    "score": 7,
    "reasoning": "The policy provides a foundational read-only S3 access template with core permissions, but lacks flexibility and comprehensive security controls. It would benefit from more generalized resource targeting and explicit permission scoping."
  },
  {
    "output": "Here's a solution to validate AWS EC2 instance names using a regular expression:\n\n```python\nimport re\n\ndef validate_ec2_instance_name(name):\n    # Regular expression pattern for EC2 instance name validation\n    pattern = r'^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'\n    \n    # Check if the name matches the pattern\n    if re.match(pattern, name):\n        return True\n    return False\n\n# Test cases\ntest_names = [\n    \"my-ec2-instance\",      # Valid\n    \"test-instance-123\",    # Valid\n    \"valid-name\",           # Valid\n    \"a\",                    # Valid (minimum length)\n    \"my-very-long-instance-name-with-numbers-123\", # Valid\n    \n    \"My-Invalid-Name\",      # Invalid (uppercase letters)\n    \"-invalid-name\",        # Invalid (starts with hyphen)\n    \"invalid-name-\",        # Invalid (ends with hyphen)\n    \"a\" * 64,               # Invalid (too long)\n    \"invalid name\"          # Invalid (contains space)\n]\n\n# Run validation tests\nfor name in test_names:\n    print(f\"'{name}': {validate_ec2_instance_name(name)}\")\n```\n\nLet's break down the regular expression `^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$`:\n\n- `^` - Start of the string\n- `[a-z0-9]` - First character must be a lowercase letter or number\n- `[a-z0-9-]{0,61}` - Middle section allows 0-61 characters of lowercase letters, numbers, or hyphens\n- `[a-z0-9]` - Last character must be a lowercase letter or number\n- `$` - End of the string\n\nKey validation rules:\n1. 1-63 characters long\n2. Only lowercase letters, numbers, and hyphens\n3. Cannot start or end with a hyphen\n4. No spaces or special characters allowed\n\nWhen you run this script, it will output:\n```\n'my-ec2-instance': True\n'test-instance-123': True\n'valid-name': True\n'a': True\n'my-very-long-instance-name-with-numbers-123': True\n'My-Invalid-Name': False\n'-invalid-name': False\n'invalid-name-': False\n'aaaaaaa...': False\n'invalid name': False\n```\n\nAlternative approaches:\n1. You could use `len()` for length validation in addition to regex\n2. For more complex validation, you might create a custom validation function\n\nAdditional validation considerations:\n- Some AWS services might have slightly different naming conventions\n- Always refer to the most recent AWS documentation for specific naming rules\n\nThis regex provides a robust way to validate EC2 instance names according to AWS naming conventions.",
    "test_case": {
      "task": "Develop a regular expression that validates AWS resource naming conventions, specifically for validating EC2 instance names (lowercase letters, numbers, hyphens, 1-63 characters long)"
    },
    "score": 8,
    "reasoning": "The solution provides a robust, regex-based approach to validating EC2 instance names with strong pattern matching and test coverage. While technically sound, it lacks advanced error handling and doesn't leverage native AWS validation mechanisms."
  }
]